// Generated by CoffeeScript 1.10.0
var Feed, americano, base_decode, decode, getAbsoluteLocation, getEncoding, getFeed, getFeedBuffer, http, https, iconv, isHttp, isHttps, url, zlib;

http = require('http');

https = require('https');

zlib = require('zlib');

iconv = require('iconv');

url = require('url');

americano = require('americano-cozy');

module.exports = Feed = americano.getModel('Feed', {
  'title': {
    type: String
  },
  'url': {
    type: String
  },
  'last': {
    type: String
  },
  'tags': {
    type: JSON
  },
  'description': {
    type: String
  },
  'content': {
    type: String
  },
  'created': {
    type: Date,
    "default": Date
  },
  'updated': {
    type: Date,
    "default": Date
  }
});

Feed.all = function(params, callback) {
  return Feed.request("byTags", params, callback);
};

base_decode = function(buffer, encoding, opt) {
  var content, converter, error, error1, utf8;
  utf8 = "utf-8";
  if (opt != null) {
    utf8 += opt;
  }
  converter = new iconv.Iconv(encoding, utf8);
  try {
    buffer = converter.convert(buffer);
    return content = buffer.toString();
  } catch (error1) {
    error = error1;
    return content = "";
  }
};

decode = function(buffer, encoding) {
  var content, icontent;
  content = base_decode(buffer, encoding);
  icontent = base_decode(buffer, encoding, "//translit//ignore");
  if (encoding !== "iso-8859-1" && content.length !== icontent.length) {
    content = base_decode(buffer, "iso-8859-1", "//translit//ignore");
  }
  return content;
};

getFeedBuffer = function(feed, buffer, encoding) {
  return feed.content = decode(buffer, encoding);
};

isHttp = function(uri) {
  return uri.slice(0, 4) === "http";
};

isHttps = function(uri) {
  return uri.slice(0, 5) === "https";
};

getAbsoluteLocation = function(uri, location) {
  var loc;
  loc = location;
  if (loc.charAt(0) === '/') {
    loc = uri.split('/').slice(0, 3).join('/') + loc;
  }
  if (!isHttp(loc)) {
    loc = "http://" + loc;
  }
  return loc;
};

getEncoding = function(res) {
  var charset, contentType, elem, error, error1, i, key_value, len, str;
  charset = "utf-8";
  try {
    contentType = res["headers"]["content-type"].split(";");
    for (i = 0, len = contentType.length; i < len; i++) {
      elem = contentType[i];
      key_value = (function() {
        var j, len1, ref, results;
        ref = elem.split("=");
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          str = ref[j];
          results.push(str.trim());
        }
        return results;
      })();
      if (key_value[0] === "charset") {
        charset = key_value[1];
      }
    }
  } catch (error1) {
    error = error1;
    charset = "utf-8";
  }
  return charset;
};

getFeed = function(feed, uri, callback) {
  var get, headers, parsed, protocol;
  if (isHttps(uri)) {
    protocol = https;
  } else {
    protocol = http;
    if (!isHttp(uri)) {
      uri = "http://" + uri;
    }
  }
  parsed = url.parse(uri);
  headers = {
    "User-Agent": "zero-feeds (nodejs)"
  };
  get = {
    "hostname": parsed.hostname,
    "path": parsed.path,
    "headers": headers,
    "rejectUnauthorized": false
  };
  return protocol.get(get, function(res) {
    var chunks, data, length;
    data = '';
    chunks = [];
    length = 0;
    res.on('data', function(chunk) {
      chunks.push(chunk);
      return length += chunk.length;
    });
    return res.on('end', function() {
      var encoding;
      data = Buffer.concat(chunks, length);
      if ((res["headers"] != null) && (res["headers"]["content-encoding"] != null)) {
        if (res["headers"]["content-encoding"] === "x-gzip") {
          zlib.unzip(data, function(err, buffer) {
            return getFeedBuffer(feed, buffer);
          });
        }
      } else if ((res["headers"] != null) && (res["headers"]["location"] != null)) {
        feed.url = getAbsoluteLocation(uri, res["headers"]["location"]);
        feed.save();
        getFeed(feed, feed.url, function() {});
      } else {
        encoding = getEncoding(res);
        getFeedBuffer(feed, data, encoding);
      }
      return callback.call(feed);
    });
  }).on('error', function() {
    return callback.call("Error: can't join url");
  });
};

Feed.prototype.update = function(params, callback) {
  var feed;
  feed = this;
  feed.updated = new Date;
  feed.content = "";
  feed.save();
  return getFeed(feed, feed.url, callback);
};
