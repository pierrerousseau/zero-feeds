// Generated by CoffeeScript 1.10.0
var Param, addMissingParams, availableParams, cleanParams, showOldLinks, useLightColors, useQuickmarks, useTwitter;

Param = require("../models/zfparam");

useQuickmarks = {
  "paramId": "use-quickmarks",
  "description": "settings use quickmarks",
  "value": false
};

useTwitter = {
  "paramId": "use-twitter",
  "description": "settings use twitter",
  "value": false
};

showOldLinks = {
  "paramId": "show-old-links",
  "description": "settings show new and old links",
  "value": false
};

useLightColors = {
  "paramId": "use-light-colors",
  "description": "settings use light colors",
  "value": false
};

availableParams = [useQuickmarks, useTwitter, showOldLinks, useLightColors];

cleanParams = function(params) {
  var availableParam, found, i, j, len, len1, newParams, param;
  newParams = [];
  for (i = 0, len = params.length; i < len; i++) {
    param = params[i];
    found = false;
    for (j = 0, len1 = availableParams.length; j < len1; j++) {
      availableParam = availableParams[j];
      if (param.paramId === availableParam.paramId) {
        found = true;
        break;
      }
    }
    if (!found) {
      param.destroy();
    } else {
      newParams.push(param);
    }
  }
  return newParams;
};

addMissingParams = function(params) {
  var availableParam, found, i, j, len, len1, newParam, param;
  for (i = 0, len = availableParams.length; i < len; i++) {
    availableParam = availableParams[i];
    found = false;
    for (j = 0, len1 = params.length; j < len1; j++) {
      param = params[j];
      if (param.paramId === availableParam.paramId) {
        found = true;
        break;
      }
    }
    if (!found) {
      newParam = new Param(availableParam);
      Param.create(newParam);
      params.push(newParam);
    }
  }
  return params;
};

module.exports.all = function(req, res) {
  return Param.all(function(err, params) {
    var errorMsg;
    if (err != null) {
      console.log(err);
      errorMsg = "Server error occured while retrieving data.";
      return res.send({
        error: true,
        msg: errorMsg
      });
    } else {
      params = cleanParams(params);
      params = addMissingParams(params);
      return res.send(params);
    }
  });
};

module.exports.update = function(req, res) {
  return Param.find(req.params.id, function(err, param) {
    if ((err != null) || (param == null)) {
      return res.send({
        error: true,
        msg: "Param not found"
      }, 404);
    } else {
      ['value'].forEach(function(field) {
        if (field === 'value') {
          if (req.body[field] != null) {
            return param[field] = req.body[field];
          }
        }
      });
      return param.update(req.params, function(err) {
        if (err) {
          console.log(err);
          return res.send({
            error: 'Cannot update param'
          }, 500);
        } else {
          return res.send(param);
        }
      });
    }
  });
};
